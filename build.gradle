plugins {
	id 'dev.architectury.loom' version '1.5-SNAPSHOT'
	id 'maven-publish'
	id 'com.github.johnrengelman.shadow' version '8.1.1'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
	}
	maven {
		name = "jitpack.io"
		url = "https://jitpack.io"
	}
	maven {
		name = 'ParchmentMC'
		url = 'https://maven.parchmentmc.org'
	}
	maven {
		name = 'Lenni0451'
		url = 'https://maven.lenni0451.net/releases'
	}
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/" }
	mavenLocal()
}

loom {
	accessWidenerPath = file('src/main/resources/xaeroplus.accesswidener')
	runs {
		client {
			programArgs("--username", "rfresh2")
		}
	}
}

configurations {
	jarLibs
	implementation.extendsFrom jarLibs
}

afterEvaluate {
	loom.runs.configureEach {
		// https://fabricmc.net/wiki/tutorial:mixin_hotswaps
		vmArg "-javaagent:${ configurations.compileClasspath.find { it.name.contains("sponge-mixin") } }"
//		vmArg("-Dmixin.debug.export=true")
	}
}

ext {
	worldmap_version = "1.37.8"
	minimap_version = "23.9.7"
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.layered {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-${project.minecraft_version}:${project.parchment_version}@zip")
	}
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	implementation(include 'com.github.ben-manes.caffeine:caffeine:3.1.8')
	implementation(include "net.lenni0451:LambdaEvents:2.4.1")
	jarLibs 'org.xerial:sqlite-jdbc:3.45.1.0'

	modImplementation "maven.modrinth:xaeros-world-map:${worldmap_version}_Fabric_1.20"
	modImplementation "maven.modrinth:xaeros-minimap:${minimap_version}_Fabric_1.20"

	modCompileOnly files("libs/baritone-api-fabric-1.20.1-elytra-beta-v1.jar")
	modCompileOnly "maven.modrinth:waystones:14.0.2+fabric-1.20"
	modCompileOnly "maven.modrinth:balm:7.1.4+fabric-1.20.1"
	modCompileOnly "maven.modrinth:fwaystones:3.1.3+mc1.20"
	modCompileOnly "maven.modrinth:worldtools:1.2.0+1.20.1"
//	modRuntimeOnly "maven.modrinth:owo-lib:0.11.2+1.20"
//	runtimeOnly "blue.endless:jankson:1.2.3"
//	modRuntimeOnly "maven.modrinth:auth-me:7.0.2+1.20"
	modRuntimeOnly "maven.modrinth:immediatelyfast:1.2.10+1.20.4-fabric"
	modRuntimeOnly "maven.modrinth:modmenu:7.2.2"
	modRuntimeOnly "maven.modrinth:sodium:mc1.20.1-0.5.3"
	modRuntimeOnly "maven.modrinth:fpsdisplay:3.1.0+1.20.x"
	modRuntimeOnly("me.shedaniel.cloth:cloth-config-fabric:13.0.121") {
		exclude(group: "net.fabricmc.fabric-api")
	}
}

processResources {
	filesMatching("fabric.mod.json") {
		expand([
				"version": project.version,
				"worldmap_version": project.ext.worldmap_version,
				"minimap_version": project.ext.minimap_version
		])
	}
}

tasks.register('printWorldMapVersion') {
	println project.ext.worldmap_version
}
tasks.register('printMinimapVersion') {
	println project.ext.minimap_version
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}" }
	}
}

shadowJar {
	configurations = [project.configurations.jarLibs]
	archiveClassifier.set('shadow')

	exclude 'com/google/**'
	exclude 'org/objectweb/**'
	exclude 'org/checkerframework/**'
	exclude 'org/sqlite/native/FreeBSD/**'
	exclude 'org/sqlite/native/Linux-Android/**'
	exclude 'org/sqlite/native/Linux-Musl/**'
	exclude 'org/sqlite/native/Linux/arm/**'
	exclude 'org/sqlite/native/Linux/aarch64/**'
	exclude 'org/sqlite/native/Linux/armv6/**'
	exclude 'org/sqlite/native/Linux/x86/**'
	exclude 'org/sqlite/native/Linux/armv7/**'
	exclude 'org/sqlite/native/Linux/ppc64/**'
	exclude 'org/sqlite/native/Windows/armv7/**'
	exclude 'org/sqlite/native/Windows/aarch64/**'
	exclude 'org/sqlite/native/Windows/armv7/**'
	exclude 'org/slf4j/**'
}

remapJar {
	dependsOn shadowJar
	inputFile.set shadowJar.archiveFile.get()
}
