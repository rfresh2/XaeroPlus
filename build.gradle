buildscript {
    repositories {
        maven {
            url = 'https://files.minecraftforge.net/maven'
        }
        maven {
            name = 'SpongePowered'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:5.+'
        classpath 'org.spongepowered:mixingradle:0.7.33'
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

compileJava.options.encoding = 'UTF-8'
version = '1.12.2'
group = 'xaeroplus'
archivesBaseName = 'xaeroplus'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

repositories {
    maven {
        name = 'spongepowered-repo'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }
    maven {
        url "https://cursemaven.com"
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
    }
    maven {
        name = "jitpack.io"
        url = "https://jitpack.io"
    }
    maven { url = 'https://impactdevelopment.github.io/maven/' }
    jcenter()
    mavenCentral()
    mavenLocal()
}

minecraft {

    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'stable', version: '39-1.12'

    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
//            args '--uuid', '572e683c-888a-4a0d-bc10-5d9cfa76d892', '--accessToken', '0'
            workingDirectory project.file('run')

            property 'fml.coreMods.load', 'xaeroplus.mixin.MixinLoaderForge,xaeroplus.dev.minimap.core.XaeroMinimapPlugin,xaeroplus.dev.worldmap.core.XaeroWorldMapPlugin'

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
    legacy {
        fixClasspath = false
        extractMappings = false
    }
}

configurations {
    jarLibs
    // Force choosing the correct nightly build because Mac OS chooses an invalid one
    all {
        resolutionStrategy {
            force 'org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209'
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'

    jarLibs('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        exclude module: 'commons-io'
        exclude module: 'gson'
        exclude module: 'guava'
        exclude module: 'launchwrapper'
        exclude module: 'log4j-core'
    }

    jarLibs 'com.github.ben-manes.caffeine:caffeine:2.9.3'
    jarLibs 'org.apache.commons:commons-compress:1.23.0'
    jarLibs 'org.xerial:sqlite-jdbc:3.42.0.0'

    implementation(fg.deobf("maven.modrinth:xaeros-world-map:1.30.5_Forge_1.12"))
    implementation(fg.deobf("maven.modrinth:xaeros-minimap:23.5.0_Forge_1.12"))
    implementation(fg.deobf('cabaletta:baritone-deobf-unoptimized-mcp-dev:1.2')).setChanging(true)

    annotationProcessor('org.spongepowered:mixin:0.8.5:processor') {
        exclude module: 'gson'
    }

    implementation configurations.jarLibs
}

sourceSets {
    wdl {
        compileClasspath += main.compileClasspath
    }
    main {
        ext.refMap = "mixins.xaeroplus.refmap.json"
        compileClasspath += wdl.output
        output.resourcesDir = output.getClassesDirs().getSingleFile()
    }
}

mixin {
    defaultObfuscationEnv 'searge'
    add sourceSets.main, 'mixins.xaeroplus.refmap.json'
}

jar.enabled(false)

shadowJar {
    configurations = [project.configurations.jarLibs]
    archiveClassifier.set('')

    manifest {
        attributes([
                'Manifest-Version': 1.1,
                'MixinConfigs': 'mixins.xaeroplus.json',
                'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                'TweakOrder': 0,
                'FMLCorePluginContainsFMLMod': 'true',
                'FMLCorePlugin': 'xaeroplus.mixin.MixinLoaderForge',
                'ForceLoadAsMod': 'true',
                "Specification-Title": "XaeroPlus",
                "Specification-Vendor": "rfresh2",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"rfresh",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    exclude 'org/sqlite/native/FreeBSD/**'
    exclude 'org/sqlite/native/Linux-Android/**'
    exclude 'org/sqlite/native/Linux-Musl/**'
    exclude 'org/sqlite/native/Linux/arm/**'
    exclude 'org/sqlite/native/Linux/aarch64/**'
    exclude 'org/sqlite/native/Linux/armv6/**'
    exclude 'org/sqlite/native/Linux/x86/**'
    exclude 'org/sqlite/native/Linux/armv7/**'
    exclude 'org/sqlite/native/Linux/ppc64/**'
    exclude 'org/sqlite/native/Windows/armv7/**'
    exclude 'org/sqlite/native/Windows/aarch64/**'
    exclude 'org/sqlite/native/Windows/armv7/**'

    finalizedBy 'configureReobfTaskForReobfShadowJar', 'reobfShadowJar'
    mustRunAfter 'jar'
}

reobf {
    shadowJar {}
    jar {
        enabled = false
    }
}

build.dependsOn shadowJar

task setGameDir() {
    // Check if custom gamedir has been passed, if not use default ones per platform
    if (!project.hasProperty("gameDir")) {
        if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            project.ext.gameDir = System.getenv("APPDATA") + "/.minecraft"
        } else if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
            project.ext.gameDir = System.properties["user.home"] + "/Library/Application Support/minecraft"
        } else {
            project.ext.gameDir = System.properties["user.home"] + "/.minecraft"
        }
    }
}

/**
 * Courtesy of ForgeHax.
 * I symlink my vanilla mc launcher folder for MultiMC
 * various hardcoded directories in here could be changed by preference if your main dir is a MultiMC one
 */
class CopyJarTask extends DefaultTask {
    CopyJarTask() {
        group = "build"
    }
    @TaskAction
    protected void exec() {
        project.copy {
            final gameDir = project.ext.gameDir;
            final modDir = "$gameDir/mods/"

            // find previous jar (if it exists)
            final previousJars = project.fileTree(dir: modDir).matching {
                include project.archivesBaseName + '*'
            }.files

            // change file name
            if (previousJars) {
                // create .backups folder
                final backupDir = modDir + '/.backups/'
                project.file(backupDir).mkdirs()

                for (File previousJar : previousJars) {
                    final n = modDir + '/.backups/' + previousJar.getName() + '.bk'
                    def f = project.file(n)
                    def i = 1
                    while (f.exists()) {
                        f = project.file(n + '_' + i)
                        i++
                    }
                    previousJar.renameTo(f)
                }
            }

            from project.jar
            into "$gameDir/mods"
        }
    }
}

task copyJar(type: CopyJarTask, dependsOn: [setGameDir, build])
